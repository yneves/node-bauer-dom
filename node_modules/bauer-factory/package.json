{
  "name": "bauer-factory",
  "version": "2.0.4",
  "description": "General utilities for nodejs.",
  "keywords": [
    "class",
    "method",
    "type",
    "signature",
    "overload",
    "function",
    "object",
    "create"
  ],
  "license": "MIT",
  "homepage": "https://github.com/yneves/node-bauer-factory",
  "author": {
    "name": "Yuri Neves Silveira",
    "email": "npm@yneves.com",
    "url": "http://yneves.com/"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/yneves/node-bauer-factory.git"
  },
  "scripts": {
    "test": "mocha"
  },
  "devDependencies": {
    "mocha": ">=1.0.0"
  },
  "main": "lib/index.js",
  "gitHead": "55adbce88be8cff70b42fec160c0ca8eef12e740",
  "readme": "node-bauer-factory\n========================\n\nGeneral utilities for nodejs.\n\n## Installation\n\n```\nnpm install bauer-factory\n```\n\n## Usage\n\n```js\nvar factory = require(\"bauer-factory\");\n```\n\n## .type\n\nReturned value can be string, number, boolean, date, regexp, error, array, object, arguments, null, undefined or function.\n\n\n```js\n// returns type of given argument\nvar type = factory.type(arg);\n```\n\n## .isNull\n\n```js\nfactory.isNull(arg)\n// same as\nfactory.type(arg) === \"null\"\n```\n\n## .isDefined\n\n```js\nfactory.isDefined(arg)\n// same as\nfactory.type(arg) !== \"undefined\"\n```\n\n## .isUndefined\n\n```js\nfactory.isUndefined(arg)\n// same as\nfactory.type(arg) === \"undefined\"\n```\n\n## .isDate\n\n```js\nfactory.isDate(arg)\n// same as\nfactory.type(arg) === \"date\"\n```\n\n## .isError\n\n```js\nfactory.isError(arg)\n// same as\nfactory.type(arg) === \"error\"\n```\n\n## .isBoolean\n\n```js\nfactory.isBoolean(arg)\n// same as\nfactory.type(arg) === \"boolean\"\n```\n\n## .isArray\n\n```js\nfactory.isArray(arg)\n// same as\nfactory.type(arg) === \"array\"\n```\n\n## .isNumber\n\n```js\nfactory.isNumber(arg)\n// same as\nfactory.type(arg) === \"number\"\n```\n\n## .isString\n\n```js\nfactory.isString(arg)\n// same as\nfactory.type(arg) === \"string\"\n```\n\n## .isObject\n\n```js\nfactory.isObject(arg)\n// same as\nfactory.type(arg) === \"object\"\n```\n\n## .isRegExp\n\n```js\nfactory.isRegExp(arg)\n// same as\nfactory.type(arg) === \"regexp\"\n```\n\n## .isFunction\n\n```js\nfactory.isFunction(arg)\n// same as\nfactory.type(arg) === \"function\"\n```\n\n## .isArguments\n\n```js\nfactory.isArguments(arg)\n// same as\nfactory.type(arg) === \"arguments\"\n```\n\n## .createMethod\n\nAccepts an object containing types/lengths as keys and values as functions.\n\n```js\nvar func = factory.createMethod({\n\t0: function() {}, // executed if called with zero arguments\n\ts: function(s) {}, // executed if called with one string\n\tsf: function(s) {}, // executed if called with a string and a function\n\t_: function() {}, // executed if none of the above is matched\n});\n```\n\nLetters are taken as the first character of the argument's type as returned by `factory.type`. Any combination can be used to route the function execution. This takes priority over argument's length routing.\n\n```js\nvar func = factory.createMethod({\n\to: function() {}, // executed if called with object\n\ta: function(s) {}, // executed if called with array or arguments\n\tsffb: function(s,f0,f1,b) {}, // executed if called with a string, two functions and a boolean\n});\n```\n\nNumbers are taken as the length of the arguments object. Nested rules are supported.\n\n```js\nvar func = factory.createMethod({\n\t5: { // executed if called with five arguments\n\t\tsssss: function() {}, // five strings\n\t\tassss: function() {}, // one array and four strings\n\t},\n\t1: function(arg) {}, // executed if called with one argument\n});\n```\n\nUnderscore holds the default code. If no rule is matched and there's no `_` throws an `ReferenceError`.\n\n```js\nvar func = factory.createMethod({\n\t_: function() {},\n});\n```\n\nStrings can be used as code. They are converted to functions internally with the defined arguments.\n\n```js\nvar func = factory.createMethod({\n\ts: \"return this.get(s)\", // the given string can be refered as 's'\n\tss: \"return this.both(s0,s1)\", // if it's two strings, just add the index\n\tf: \"this.on('ready',f)\", // easy to define aliases\n});\n```\n\nIf the code does not use any external vars its possible to optimize the generated function by passing a second argument as `true`.\n\n```js\nvar optimized = factory.createMethod({\n\ts: \"return this.get(s)\",\n\tss: \"return this.both(s0,s1)\",\n\tf: \"this.on('ready',f)\",\n},true); // tell factory.method that this function does not use any external var\n```\n\n## .createClass\n\nCreates a class with given methods, constructor and inheritance.\n\n```js\nvar Bauer = factory.createClass({\n\n\t// requires 'events' and inherits EventEmitter from it\n\t// also accepts functions\n\tinherits: require(\"events\").EventEmitter,\n\n\t// called when new Bauer() is executed\n\t// it can also be routed by factory.method if needed\n\tconstructor: function() {\n\t},\n\n\t// methods are created by factory.method\n\tkillTerrorists: {\n\t},\n\n\ttortureSuspects: {\n\t},\n\n\tdoWhateverIsNecessary: function() {},\n\n});\n```\n\nThe created class can be instantiated and inherited just like any other class.\n\n```js\nvar jack = new Bauer();\n\njack.killTerrorists();\n\njack.tortureSuspects();\n\njack.doWhateverIsNecessary();\n```\n\n## .createObject\n\nCreates a class just like .class does and returns an instance of it.\n\n```js\n// accepts same arguments as .createClass\nvar jack = factory.createObject({\n\n\t// requires 'events' and inherits EventEmitter from it\n\t// also accepts functions\n\tinherits: require(\"events\").EventEmitter,\n\n\t// called when new Bauer() is executed\n\t// it can also be routed by factory.method if needed\n\tconstructor: function() {\n\t},\n\n\t// methods are created by factory.method\n\tkillTerrorists: {\n\t\ts: function() {},\n\t\tn: function() {},\n\t},\n\n\ttortureSuspects: {\n\t\t1: function() {},\n\t\t2: function() {},\n\t},\n\n\tdoWhateverIsNecessary: function() {},\n\n});\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/yneves/node-bauer-factory/issues"
  },
  "_id": "bauer-factory@2.0.4",
  "_shasum": "f922a69b28d9b94d91f40da99dc0b7dc007c5eb4",
  "_from": "bauer-factory@2.0.4"
}
